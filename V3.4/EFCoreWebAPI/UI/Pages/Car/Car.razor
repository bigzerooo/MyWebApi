@page "/cars/{id}"
@inject UI.Services.CarService carService
@inject UI.Services.CarTypeService carTypeService
@inject IStringLocalizer<Car> L
@if (car == null)
{
    <p>@L["Not found!"]</p>
}
else
{
    <img src="@imagePath" style="border-style: outset; border-color: gray; border-width: 5px; margin-right: 1%; margin-bottom: 1%; width: 40%; float: left;">
    <h2><b>@L["Brand"]:</b> @car.brand</h2>
    <p><b>@L["Year"]:</b> @car.year</p>
    <p><b>@L["Price"]:</b> $@car.price</p>
    <p><b>@L["Price per hour"]:</b> $@car.pricePerHour</p>
    <p><b>@L["Car type"]:</b> @carType</p>
    <p>
        <b>@L["Description"]:</b> @car.description
    </p>
    <br />

    <AuthorizeView>
        <Authorized>
            <a href="/HireTheCar/@Id" class="btn btn-primary">@L["Hire the car"]</a>
        </Authorized>
    </AuthorizeView>
}



@code {
    CarViewModel car;
    string carType { get; set; }
    string imagePath;
    [Parameter]
    public string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        car = await carService.GetCarsByIdAsync(Int32.Parse(Id));
        if (string.IsNullOrWhiteSpace(car.imagePath))
            imagePath = "/car_images/unknown.jpg";
        else
            imagePath = car.imagePath;
        carType = await carTypeService.GetCarTypeByIdAsync(car.carTypeId);
    }
}
