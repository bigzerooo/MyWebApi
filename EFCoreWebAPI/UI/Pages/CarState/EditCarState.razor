@inject UI.Services.CarStateService carStateService
@inject NavigationManager  navigationManager
@inject IStringLocalizer<EditCarState> L

@attribute [Authorize(Roles = "admin")]
@page "/carstates/update/{id}"

<h3>@L["Edit car state"]</h3>
<hr />

<EditForm class="d-flex flex-column w-25" Model="@CarState" OnValidSubmit="@EditAsync">

    <FluentValidator />
    <ValidationSummary />
    <ErrorSummary Errors="Errors" />

    <MatTextField @bind-Value="@CarState.State" Label="@L["Car state"]"></MatTextField>
    
    <button state="submit" class="btn btn-sm btn-primary">@L["Edit"]</button>

</EditForm>

@code {
    [Parameter]
    public string Id { get; set; }

    private CarStateViewModel CarState { get; set; }

    private IEnumerable<string> Errors { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CarState = new CarStateViewModel();
        Errors = new string[0];

        int intId = Int32.Parse(Id);
        CarState.State = await carStateService.GetCarStateByIdAsync(intId);
        CarState.Id = intId;
    }

    private async Task EditAsync()
    {
        var result = await carStateService.UpdateCarStateAsync(CarState);

        if (result.IsSuccessful)
        {
            navigationManager.NavigateTo("/carstates");
        }
        else
        {
            Errors = result.Errors;
        }
    }
}
