@page "/clientcarhires"
@inject UI.Services.CarHiresService carHireService
@inject AuthenticationStateProvider authentificationStateProvider
@inject IStringLocalizer<ClientCarHires> L
@attribute [Authorize]
<h3>@L["Client carhires"]</h3>
<table class="table table-condensed table-striped table-bordered">
    <tr>
        <th>@L["Car"]</th>
        <th>@L["Begin date"]</th>
        <th>@L["Car state id"]</th>
        <th>@L["Discount"]</th>
        <th>@L["Penalty"]</th>
        <th>@L["End date"]</th>
        <th>@L["Price"]</th>
    </tr>
    @foreach (var carHire in carHires)
    {
        <tr>
            <td><a class="btn btn-primary" href="/cars/@carHire.CarId">@L["Car"]</a></td>
            <td>@carHire.BeginDate</td>
            <td>@carHire.CarStateId</td>                        
            <td>@carHire.Discount</td>
            <td>@carHire.Penalty</td>
            <td>@carHire.EndDate</td>
            <td>@carHire.Price</td>            
        </tr>
    }
</table>
@code {
    List<CarHireViewModel> carHires { get; set; } = new List<CarHireViewModel>();
    protected override async Task OnInitializedAsync()
    {
        var authState = await authentificationStateProvider.GetAuthenticationStateAsync();
        var clientId = authState.User.Claims.First(x => x.Type == "clientId").Value;

        carHires = await carHireService.GetCarHiresByClientIdAsync(clientId);
    }
}
