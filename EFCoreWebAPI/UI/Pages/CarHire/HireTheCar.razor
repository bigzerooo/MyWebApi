@page "/HireTheCar/{carid}"
@inject UI.Services.CarHiresService carHiresService
@inject UI.Services.CarService carService
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authentificationStateProvider
@inject IStringLocalizer<HireTheCar> L
@attribute [Authorize]
@Error
<MatDatePicker @bind-Value="ExpectedEndDate" Label="@L["Expected end date"]" EnableTime="true" EnableSeconds="true" Minimum="@DateTime.Now" Maximum="@DateTime.Now.AddYears(1)"></MatDatePicker>
<br />
<br />
<button class="btn btn-primary" @onclick="Calculate">@L["Calculate expected price"]</button>
<br />
<br />
<MatTextField @bind-Value="ExpectedPrice" Disabled="true"></MatTextField>
<br />
<br />
<button class="btn btn-primary" @onclick="Hire">@L["Hire"]</button>
@code {
    [Parameter]
    public string CarId { get; set; }
    public string Error { get; set; } = "";
    public string ClientId { get; set; } = "";
    DateTime? ExpectedEndDate = DateTime.Now;
    public decimal ExpectedPrice { get; set; } = 0;
    protected override async Task OnInitializedAsync()
    {
        var authState = await authentificationStateProvider.GetAuthenticationStateAsync();
        ClientId = authState.User.Claims.First(x => x.Type == "clientId").Value;
    }
    protected async Task Calculate()
    {
        ExpectedPrice = await carService.CalculatePrice(CarId, (DateTime)ExpectedEndDate);
    }

    protected async Task Hire()
    {
        Error = "";
        if (ExpectedEndDate == null)
        {
            Error = "Choose date";
            return;
        }
        var result = await carHiresService.HireTheCarAsync(CarId, ClientId, (DateTime)ExpectedEndDate);
        if (result.IsSuccessStatusCode)
            navigationManager.NavigateTo("/unreturnedcarhires");
        else
            Error = result.StatusCode.ToString();
    }

}

