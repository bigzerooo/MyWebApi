@using Microsoft.AspNetCore.Http
@using System.IO;
@using System.Drawing;
@using System.Drawing.Imaging;
@using Microsoft.AspNetCore.Hosting;
@inject IWebHostEnvironment _appEnvironment
@inject Services.CarService carService
@inject Services.CarTypeService carTypeService
@inject IStringLocalizer<CarsAdd> L
@page "/cars/add"
@attribute [Authorize(Roles = "admin")]

<h3>@L["Cars add"]</h3>
<hr />
<a class="btn btn-sm btn-primary" href="cars/hub">@L["Back"]</a>
<br />
<br />

<EditForm Model="@Car" OnValidSubmit="@Insert">
    <FluentValidator></FluentValidator>
    <ValidationSummary />
    <p>@Error</p>
    <p>
        <MatTextField @bind-Value="Car.brand" Label=@L["Brand"]></MatTextField>
    </p>
    <p>
        <MatTextField @bind-Value="Car.price" Label=@L["Price"]></MatTextField>
    </p>
    <p>
        <MatTextField @bind-Value="Car.pricePerHour" Label=@L["Price per hour"]></MatTextField>
    </p>
    <p>
        <MatSelectItem @bind-Value="@CarType" Items="@CarTypeNames"></MatSelectItem>
    </p>
    <p>
        <MatTextField @bind-Value="Car.year" Label=@L["Year"]></MatTextField>
    </p>
    <p style="width: auto">
        <MatTextField @bind-Value="Car.description" Label="Description" TextArea="true" Outlined="true"></MatTextField>
    </p>


    <InputFile OnChange="@OnInputFileChange" />
    @if (file != null)
    {
        <p>Загружен файл : @file.Name</p>
    }
    <br />
    <br />

    <button type="submit" class="btn btn-sm btn-primary">@L["Insert"]</button>

</EditForm>



@code {
    private CarViewModel Car { get; set; } = new CarViewModel();

    public List<CarTypeViewModel> CarTypes;
    public List<string> CarTypeNames = new List<string>();
    public string CarType { get; set; }

    public string Error { get; set; }

    IBrowserFile file;

    void OnInputFileChange(InputFileChangeEventArgs e)
    {
        file = e.File;
    }

    protected override async Task OnInitializedAsync()
    {
        CarTypes = await carTypeService.GetCarTypesAsync();
        foreach (var carType in CarTypes)
        {
            CarTypeNames.Add(carType.type);
        }
    }

    protected async Task Insert()
    {
        Error = "";
        try
        {
            int CarTypeId = CarTypes.First(x => x.type == CarType).id;

            string Path;
            var format = "image/jpeg";

            if (file == null)
                throw new Exception("File not found");
            if (file.ContentType != format)
                throw new Exception("File in the wrong format! Please use .jpg");
            Car.carTypeId = CarTypeId;

            Path = await AddFile(file);
            Car.imagePath = Path;

            var result = await carService.InsertCarAsync(Car);
            if (!result.IsSuccessStatusCode)
                throw new Exception(result.StatusCode.ToString());
            ClearFields();
        }
        catch (Exception e)
        {
            Error = e.Message;
        }


    }
    protected void ClearFields()
    {
        Car.brand = "";
        Car.price = 0;
        Car.pricePerHour = 0;
        Car.description = "";
        Car.year = null;
        file = null;
    }
    protected async Task<string> AddFile(IBrowserFile uploadedFile)
    {
        if (uploadedFile != null)
        {
            var resizedImageFile = await uploadedFile.RequestImageFileAsync("image/jpeg", 1280, 720);
            var buffer = new byte[resizedImageFile.Size];
            await resizedImageFile.OpenReadStream().ReadAsync(buffer);

            var date = DateTime.Now;
            string path = "/car_images/"
                + $"{date.Year}_{date.Month}_{date.Day}_{date.Hour}_{date.Minute}_{date.Second}_"
                + resizedImageFile.Name;

            MemoryStream ms = new MemoryStream(buffer, 0, buffer.Length);
            Image image = Image.FromStream(ms, true);
            image.Save(_appEnvironment.WebRootPath + path, ImageFormat.Jpeg);

            return path;
        }
        else
            return null;
    }
}
