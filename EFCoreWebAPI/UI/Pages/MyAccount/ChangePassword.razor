@inject UI.Services.AccountService accountService
@inject AuthenticationStateProvider authentificationStateProvider
@inject NavigationManager navigationManager
@inject IStringLocalizer<ChangePassword> L
@page "/myaccount/changePassword"
@attribute [Authorize]
<h3>@L["Change password"]</h3>
<hr />
<EditForm Model="@MyUser" OnValidSubmit="@PasswordChange">
    <FluentValidator></FluentValidator>
    <ValidationSummary />
    <p>@Error</p>
    <p>
        <MatTextField @bind-Value="MyUser.oldPassword" Label=@L["Old password"] Type="Password"></MatTextField>
    </p>
    <p>
        <MatTextField @bind-Value="MyUser.newPassword" Label=@L["New password"] Type="Password"></MatTextField>
    </p>
    <p>
        <MatTextField @bind-Value="MyUser.newPasswordConfirm" Label=@L["Confirm new password"] Type="Password"></MatTextField>
    </p>
    <button type="submit" class="btn btn-sm btn-primary">@L["Change password"]</button>
</EditForm>

@code {
    public MyUserChangePasswordViewModel MyUser { get; set; } = new MyUserChangePasswordViewModel();
    string Error { get; set; } = "";
    protected override async Task OnInitializedAsync()
    {
        var authState = await authentificationStateProvider.GetAuthenticationStateAsync();
        var accountId = authState.User.Claims.First(x => x.Type == "accountId").Value;
        MyUser.id = Int32.Parse(accountId);
    }
    public async Task PasswordChange()
    {
        Error = "";
        var result = await accountService.ChangePasswordAsync(MyUser);
        if (!result.IsSuccessStatusCode)
            Error = await result.Content.ReadAsStringAsync();
        else
            navigationManager.NavigateTo("/myaccount");
    }
}
