@inject UI.Services.AccountService accountService
@inject AuthenticationStateProvider authentificationStateProvider
@inject NavigationManager navigationManager
@inject IStringLocalizer<ChangePassword> L

@attribute [Authorize]
@page "/myaccount/changePassword"

<h3>@L["Change password"]</h3>
<hr />

<EditForm class="d-flex flex-column w-25" Model="@User" OnValidSubmit="@PasswordChangeAsync">

    <FluentValidator />
    <ValidationSummary />
    <ErrorSummary Errors="Errors" />

    <MatTextField @bind-Value="User.OldPassword" Label=@L["Old password"] Type="Password" />
    <MatTextField @bind-Value="User.NewPassword" Label=@L["New password"] Type="Password" />
    <MatTextField @bind-Value="User.NewPasswordConfirm" Label=@L["Confirm new password"] Type="Password" />

    <button type="submit" class="btn btn-sm btn-primary">@L["Change password"]</button>

</EditForm>

@code {
    MyUserChangePasswordViewModel User { get; set; }

    IEnumerable<string> Errors { get; set; }

    protected override async Task OnInitializedAsync()
    {
        User = new MyUserChangePasswordViewModel();
        Errors = new string[0];

        var authState = await authentificationStateProvider.GetAuthenticationStateAsync();
        User.Id = Int32.Parse(authState.User.Claims.First(x => x.Type == "accountId").Value);
    }

    private async Task PasswordChangeAsync()
    {
        var result = await accountService.ChangePasswordAsync(User);

        if (result.Succeeded)
        {
            navigationManager.NavigateTo("/myaccount");
        }
        else
        {
            Errors = result.Errors.Select(error => error.Description);
        }
    }
}
