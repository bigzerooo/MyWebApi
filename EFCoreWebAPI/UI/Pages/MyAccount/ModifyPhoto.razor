@using  System.IO
@inject UI.Services.ClientService clientService
@inject AuthenticationStateProvider authentificationStateProvider
@inject NavigationManager navigationManager
@inject IStringLocalizer<ModifyPhoto> L
@page "/myaccount/photo"
@attribute [Authorize]
<h3>@L["Modify photo"]</h3>
<hr />
<p>@Error</p>
<InputFile OnChange="@OnInputFileChange" />
@if (file != null)
{
    <p>@L["File downloaded"] : @file.Name</p>
    <p>@file.ContentType</p>    
    <p></p>
    <button @onclick="Insert">@L["Insert"]</button>
}
@code {
    public ClientViewModel client { get; set; } = new ClientViewModel();
    IBrowserFile file;
    public string Error { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var authState = await authentificationStateProvider.GetAuthenticationStateAsync();
        var clientId = authState.User.Claims.First(x => x.Type == "clientId").Value;
        client = await clientService.GetClientsByIdAsync(Int32.Parse(clientId));
    }
    void OnInputFileChange(InputFileChangeEventArgs e)
    {
        file = e.File;
    }
    public async Task Insert()
    {
        try
        {
            var format = "image/jpeg";
            if (file == null)
                throw new Exception("File not found");
            if (file.ContentType != format)
                throw new Exception("File in the wrong format! Please use .jpg");
            var resizedImageFile = await file.RequestImageFileAsync(format, 150, 150);
            var buffer = new byte[resizedImageFile.Size];
            await resizedImageFile.OpenReadStream().ReadAsync(buffer);
            client.photo = buffer;
            var result = await clientService.UpdateClientAsync(client);
            if (!result.IsSuccessStatusCode)
                throw new Exception(result.StatusCode.ToString());
            navigationManager.NavigateTo("/myaccount");
        }
        catch (Exception e)
        {
            Error = e.Message;
        }
    }
}
