@inject UI.Services.AccountService accountService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Register> L

@page "/register"

<h3>@L["Register"]</h3>
<hr />

<EditForm class="d-flex flex-column w-25" Model="@User" OnValidSubmit="@RegisterAsync">

    <FluentValidator />
    <ValidationSummary />
    <ErrorSummary Errors="Errors" />

    <MatTextField @bind-Value="User.UserName" Label="@L["Username"]" />
    <MatTextField @bind-Value="User.Email" Label="@L["Email"]" />
    <MatTextField @bind-Value="User.Password" Label="@L["Password"]" Type="password" />
    <MatTextField @bind-Value="User.PasswordConfirm" Label="@L["Confirm password"]" Type="password" />

    <button type="submit" class="btn btn-sm btn-primary">@L["Register button"]</button>

</EditForm>

@code {
    MyUserRegisterViewModel User { get; set; }

    IEnumerable<string> Errors { get; set; }

    protected override void OnInitialized()
    {
        User = new MyUserRegisterViewModel();
        Errors = new string[0];
    }

    private async Task RegisterAsync()
    {
        var registerResult = await accountService.CreateUserAsync(User);

        if (registerResult.Succeeded)
        {
            var loginResult = await accountService.LoginAsync(new MyUserLoginViewModel
            {
                UserName = User.UserName,
                Password = User.Password,
                RememberMe = true
            });

            if (loginResult.Successful)
            {
                NavigationManager.NavigateTo("/");
            }
        }
        else
        {
            Errors = registerResult.Errors.Select(error => error.Description);
        }
    }
}
